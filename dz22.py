# Класс Alphabet
# 1. Создайте класс Alphabet
# 2. Создайте метод __init__(), внутри которого будут определены два динамических свойства:
#    1) lang - язык и 2) letters - список букв. Начальные значения свойств берутся из входных параметров метода.
# 3. Создайте метод print(), который выведет в консоль буквы алфавита
# 4. Создайте метод letters_num(), который вернет количество букв в алфавите

# Класс EngAlphabet
# 1. Создайте класс EngAlphabet путем наследования от класса Alphabet
# 2. Создайте метод __init__(), внутри которого будет вызываться родительский метод __init__().
#    В качестве параметров ему будут передаваться обозначение языка(например, 'En') и строка,
#    состоящая из всех букв алфавита(можно воспользоваться свойством ascii_uppercase из модуля string).
# 3. Добавьте приватное статическое свойство __letters_num, которое будет хранить количество букв в алфавите.
# 4. Создайте метод is_en_letter(), который будет принимать букву в качестве параметра и определять,
#    относится ли эта буква к английскому алфавиту.
# 5. Переопределите метод letters_num() - пусть в текущем классе он будет возвращать значение свойства __letters_num.
# 6. Создайте статический метод example(), который будет возвращать пример текста на английском языке.

# Тесты:
# 1. Создайте объект класса EngAlphabet
# 2. Напечатайте буквы алфавита для этого объекта
# 3. Выведите количество букв в алфавите
# 4. Проверьте, относится ли буква F к английскому алфавиту
# 5. Проверьте, относится ли буква Щ к английскому алфавиту
# 6. Выведите пример текста на английском языке

import string


# Создаем класс Alphabet
class Alphabet:
    #  Создаем метод __init__(), внутри которого будут определены два динамических свойства:
    #  1) lang - язык и 2) letters - список букв. Начальные значения свойств берутся из входных параметров метода.
    def __init__(self, lang, letters):
        self.lang = lang
        self.letters = letters

    # Создаем метод print(), который выведет в консоль буквы алфавита
    def print(self):
        print(self.letters)

    # Создаем метод letters_num(), который вернет количество букв в алфавите
    def letters_num(self):
        print(len(self.letters))


# Создаем класс EngAlphabet путем наследования от класса Alphabet
class EngAlphabet(Alphabet):
    # Создаем метод __init__(), внутри которого будет вызываться родительский метод __init__().
    # В качестве параметров ему будут передаваться обозначение языка(например, 'En') и строка,
    # состоящая из всех букв алфавита(можно воспользоваться свойством ascii_uppercase из модуля string).
    def __init__(self):
        super().__init__('En', string.ascii_letters)
        # Добавляем приватное статическое свойство __letters_num, которое будет хранить количество букв в алфавите.
        self.__letters_num = len(string.ascii_letters)

    # Создаем метод is_en_letter(), который будет принимать букву в качестве параметра и определять,
    # относится ли эта буква к английскому алфавиту.
    def is_en_letter(self, letter):
        return letter in self.letters

    # Переопределите метод letters_num() - пусть в текущем классе он будет возвращать значение свойства __letters_num.
    def letters_num(self):
        return self.__letters_num

    # Создаем статический метод example(), который будет возвращать пример текста на английском языке.
    @staticmethod
    def example():
        return 'Your mobile operator is MTS'


# Создаем объект класса EngAlphabet
object = EngAlphabet()
# Напечатаем буквы алфавита для этого объекта
object.print()
# Выводим количество букв в алфавите
print(object.letters_num())
# Проверяем, относится ли буква F к английскому алфавиту
print(object.is_en_letter('F'))
# Проверяем, относится ли буква Щ к английскому алфавиту
print(object.is_en_letter('Щ'))
# Выводим пример текста на английском языке
print(EngAlphabet.example())
